#include <SoftwareSerial.h>
SoftwareSerial mySerial (12, 11);   //(RX, TX);
#include <ros.h>
#include <geometry_msgs/Twist.h>
#define encoder0PinA 18      // encoder 1
#define encoder0PinB 19
#define encoder1PinA 20     // encoder 2
#define encoder1PinB 21

unsigned long currentMillis;
unsigned long previousArmMillis;
unsigned long previousMillis;

volatile long encoder0Pos = 0;    // encoder 1
volatile long encoder1Pos = 0;    // encoder 2

void onTwist(const geometry_msgs::Twist& msg){
  if(msg.linear.x > 0)
  {FWD();}
  else if(msg.linear.x < 0)
  {BACK();}
  else if(msg.angular.z < 0)
  {RIGHT();}
  else if(msg.angular.z > 0)
  {LEFT();}
  else 
  {STOP();}
}
ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel",onTwist); 
ros::NodeHandle nh;

void setup() {
  pinMode(encoder0PinA, INPUT_PULLUP);    // encoder pins
  pinMode(encoder0PinB, INPUT_PULLUP);
  pinMode(encoder1PinA, INPUT_PULLUP); 
  pinMode(encoder1PinB, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(encoder0PinA), doEncoderA, CHANGE);
  attachInterrupt(digitalPinToInterrupt(encoder0PinB), doEncoderB, CHANGE); 
  attachInterrupt(digitalPinToInterrupt(encoder1PinA), doEncoderC, CHANGE);
  attachInterrupt(digitalPinToInterrupt(encoder1PinB), doEncoderD, CHANGE); 

  mySerial.begin(9600);
  Serial.begin(9600);

  pinMode(2,OUTPUT);//raking
  pinMode(3,OUTPUT);//raking
  pinMode(4,OUTPUT);//raking
  pinMode(5,OUTPUT);//lm
  pinMode(6,OUTPUT);//lm
  pinMode(7,OUTPUT);//lm
  pinMode(8,OUTPUT);//rm
  pinMode(9,OUTPUT);//rm
  pinMode(10,OUTPUT);//rm
  pinMode(14,INPUT);//from esp32
  pinMode(22,OUTPUT);//actuator
  pinMode(23,OUTPUT); //actuator
  pinMode(24,OUTPUT);//roller1
  pinMode(25,OUTPUT);//roller2
  nh.initNode();
  nh.subscribe(sub);
}

int val,val_esp32;
void loop() {
    nh.spinOnce();
  currentMillis = millis();   // bookmark the time 
  if (currentMillis - previousMillis >= 10) {  // start timed loop for everything else
         previousMillis = currentMillis;
         Serial.print(encoder0Pos);
         Serial.print(",");
         Serial.println(encoder1Pos);

  }
  // put your main code here, to run repeatedly:
  if(mySerial.available()){
  val = mySerial.read();
  //Serial.println(val);
  }
if (val==83) { STOP();}
if (val==70) { FWD();}
if (val==66) { BACK();}
if (val==82) { RIGHT();}
if (val==76) { LEFT();}
if (val==73) { raking_on();}
if (val==85) { actuator_fwd();}
if (val==86) { actuator_bwd();}
if (val==117) { actuator_off();}
if (val==87) { roller_on();}
if (val==119) { roller_off();} 
if (val_esp32==HIGH){actuator_fwd();delay(2000);actuator_off();raking_on();} 
else{raking_off();actuator_bwd();delay(2000);actuator_off();}
}

void FWD(){
  digitalWrite(5,LOW);
  digitalWrite(6,HIGH);
  analogWrite(7,200);
  digitalWrite(8,LOW);
  digitalWrite(9,HIGH);
  analogWrite(10,210);
}
void RIGHT(){
  digitalWrite(5,HIGH);
  digitalWrite(6,LOW);
  analogWrite(7,200);
  digitalWrite(8,LOW);
  digitalWrite(9,HIGH);
  analogWrite(10,210);  
}
void LEFT(){
  digitalWrite(5,LOW);
  digitalWrite(6,HIGH);
  analogWrite(7,200);
  digitalWrite(8,HIGH);
  digitalWrite(9,LOW);
  analogWrite(10,210);  
}
void BACK(){
  digitalWrite(5,HIGH);
  digitalWrite(6,LOW);
  analogWrite(7,200);
  digitalWrite(8,HIGH);
  digitalWrite(9,LOW);
  analogWrite(10,210);
}
void STOP(){
  digitalWrite(2,LOW);
  digitalWrite(3,LOW);
  analogWrite(4,0);
  digitalWrite(5,LOW);
  digitalWrite(6,LOW);
  analogWrite(7,0);
  digitalWrite(8,LOW);
  digitalWrite(9,LOW);
  analogWrite(10,0);
}
void raking_on(){
  digitalWrite(2,HIGH);
  digitalWrite(3,LOW);
  analogWrite(4,80); 
}
void raking_off(){
  digitalWrite(2,LOW);
  digitalWrite(3,LOW);
  analogWrite(4,0); 
}
void actuator_fwd(){
 digitalWrite(22,LOW);
 digitalWrite(23,HIGH);
}
void actuator_bwd(){
 digitalWrite(22,HIGH);
 digitalWrite(23,LOW);
}
void actuator_off(){
 digitalWrite(22,HIGH); 
 digitalWrite(23,HIGH);
}
void roller_on(){
 digitalWrite(24,HIGH);
 digitalWrite(25,HIGH);
}
void roller_off(){
 digitalWrite(24,LOW);  
 digitalWrite(25,LOW);
}

void doEncoderA(){  
  // look for a low-to-high on channel A
  if (digitalRead(encoder0PinA) == HIGH) { 
    // check channel B to see which way encoder is turning
    if (digitalRead(encoder0PinB) == LOW) {  
      encoder0Pos = encoder0Pos + 1;         // CW
    } 
    else {
      encoder0Pos = encoder0Pos - 1;         // CCW
    }
  }
  else   // must be a high-to-low edge on channel A                                       
  { 
    // check channel B to see which way encoder is turning  
    if (digitalRead(encoder0PinB) == HIGH) {   
      encoder0Pos = encoder0Pos + 1;          // CW
    } 
    else {
      encoder0Pos = encoder0Pos - 1;          // CCW
    }
  }
}

void doEncoderB(){  

  // look for a low-to-high on channel B
  if (digitalRead(encoder0PinB) == HIGH) {   
   // check channel A to see which way encoder is turning
    if (digitalRead(encoder0PinA) == HIGH) {  
      encoder0Pos = encoder0Pos + 1;         // CW
    } 
    else {
      encoder0Pos = encoder0Pos - 1;         // CCW
    }
  }
  // Look for a high-to-low on channel B
  else { 
    // check channel B to see which way encoder is turning  
    if (digitalRead(encoder0PinA) == LOW) {   
      encoder0Pos = encoder0Pos + 1;          // CW
    } 
    else {
      encoder0Pos = encoder0Pos - 1;          // CCW
    }
  }
}

void doEncoderC(){  

  // look for a low-to-high on channel A
  if (digitalRead(encoder1PinA) == HIGH) { 
    // check channel B to see which way encoder is turning
    if (digitalRead(encoder1PinB) == LOW) {  
      encoder1Pos = encoder1Pos - 1;         // CW
    } 
    else {
      encoder1Pos = encoder1Pos + 1;         // CCW
    }
  }
  else   // must be a high-to-low edge on channel A                                       
  { 
    // check channel B to see which way encoder is turning  
    if (digitalRead(encoder1PinB) == HIGH) {   
      encoder1Pos = encoder1Pos - 1;          // CW
    } 
    else {
      encoder1Pos = encoder1Pos + 1;          // CCW
    }
  }
}

void doEncoderD(){  

  // look for a low-to-high on channel B
  if (digitalRead(encoder1PinB) == HIGH) {   
   // check channel A to see which way encoder is turning
    if (digitalRead(encoder1PinA) == HIGH) {  
      encoder1Pos = encoder1Pos - 1;         // CW
    } 
    else {
      encoder1Pos = encoder1Pos + 1;         // CCW
    }
  }
  // Look for a high-to-low on channel B
  else { 
    // check channel B to see which way encoder is turning  
    if (digitalRead(encoder1PinA) == LOW) {   
      encoder1Pos = encoder1Pos - 1;          // CW
    } 
    else {
      encoder1Pos = encoder1Pos + 1;          // CCW
    }
  }
}